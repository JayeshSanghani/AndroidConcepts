-->	Suspended function
	Suspended functions are commonly used with coroutines to perform asynchronous operations such as network request
	or db queries in more redabale maanner.
	Example:
	suspend fun fetchDataFromApi(): String {
		delay(1000) // Simulating network delay
		return "Data from API"
	}

	fun main() {
		CoroutineScope(Dispatchers.Main).launch {
			val data = fetchDataFromApi()
			println(data)
		}
	}
	Usage in Android:

	Performing database operations asynchronously to avoid blocking the main thread.


-->	Inline function
	Once a functions is declared inline the compiler copies the piece of code virtually at the calling place at runtime.
	This can improve performance by reducing the overhead of function calls.
	Example:
	inline fun measureExecutionTime(block: () -> Unit) {
		val startTime = System.currentTimeMillis()
		block()
		val endTime = System.currentTimeMillis()
		println("Execution time: ${endTime - startTime} ms")
	}

	fun main() {
		measureExecutionTime {
			Thread.sleep(500) // Simulating some task
		}
	}
	Usage in Android:
	Logging execution times.
	Efficiently handling lambdas in performance-critical parts.


-->	Lamda function
	Lambda functions are anonymous functions that can be passed as arguments to other functions or returned as values.
	They are often used to simplify code and make it more concise.
	You can pass function types into another functions.
	you can return function types from another functions.
	Retuens the value of last expression.
	Example:
	fun operate(x: Int, y: Int, operation: (Int, Int) -> Int): Int {
		return operation(x, y)
	}

	fun main() {
		val sum = operate(5, 3, { a, b -> a + b }) // Lambda for addition
		val product = operate(5, 3, { a, b -> a * b }) // Lambda for multiplication
		println("Sum: $sum")
		println("Product: $product")
	}


-->	Higher order function
	Higher-order functions are functions that take other functions as arguments or return functions as values.
	They are a powerful tool for abstraction and code reuse.
	We can define higher order functions using lambda expression and anonymous function.
	Example:
	fun executeIfNetworkAvailable(isNetworkAvailable: Boolean, action: () -> Unit) {
		if (isNetworkAvailable) {
			action()
		} else {
			println("No network available")
		}
	}
	fun main() {
		executeIfNetworkAvailable(true) {
			println("Fetching data...")
		}
	}
	Usage in Android:
	Performing actions based on conditions, such as network availability.
	Writing reusable logic for callbacks.


-->	Extension function
	An extension function allows you to add functionality to existing classes without modifying their code.
	Example:
	fun TextView.setCustomTextStyle(text: String, size: Float) {
		this.text = text
		this.textSize = size
		this.setTextColor(Color.RED)
	}
	fun main() {
		val textView = TextView(context)
		textView.setCustomTextStyle("Hello Kotlin", 18f)
	}
	Usage in Android:
	Simplifying repetitive operations on views (e.g., setting styles, text, etc.).
	Enhancing readability and maintainability.

-->	Inline, Cross inline and No inline function
	In Kotlin, inline, crossinline, and noinline are modifiers used with higher-order functions (functions that take functions
	as parameters or return functions). These modifiers control how lambda functions passed to higher-order functions are
	treated during compilation.
	--Inline:
	The primary goal of inline functions is to improve performance by reducing the overhead of function calls.
	When a function is marked as inline, the compiler copies the function's bytecode directly into the call site.
	This eliminates the actual function call, which involves pushing arguments onto the stack, jumping to the function's
	code, and returning the result.
	Benefits:
	Reduced function call overhead.
	--Cross inline:
	The crossinline modifier is used in inline functions to ensure that the lambda cannot use non-local returns.
	--No inline
	noinline is the opposite of inline. It tells the compiler not to inline a specific lambda parameter of an inline function.
	This can be useful if the lambda is passed to another function or stored somewhere.

	inline fun performOperation(
		block: () -> Unit,
		crossinline crossBlock: () -> Unit,
		noinline noinlineBlock: () -> Unit) {

		block() // Inlined
		crossBlock() // Inlined, but prevents non-local returns
		noinlineBlock() // Not inlined
	}

	fun main() {
		performOperation(
			block = {
				println("Block")
				// return // Error: Non-local return not allowed here
			},
			crossBlock = {
				println("Cross Block")
				// return // Error: Non-local return not allowed here
			},
			noinlineBlock = {
				println("Noinline Block")
				return // OK: Non-local return allowed here
			}
		)
	}


-->	refield
	The reified keyword, when used with an inline function, tells the compiler to substitute the
	actual type argument at the call site.
	Because the function is inlined, the compiler knows the concrete type being used, and it can insert
	the necessary bytecode to access that type.
	Example:
	inline fun <reified T> checkType(value: Any) {
		if (value is T) {
			println("Value is of type ${T::class.simpleName}")
		} else {
			println("Value is not of type ${T::class.simpleName}")
		}
	}

	fun main() {
		checkType<String>("Hello")  // Output: Value is of type String
		checkType<Int>("Hello")     // Output: Value is not of type Int
	}


-->	takeIf
	The takeIf function returns the object if the given predicate evaluates to true. If the predicate is false, it returns null.
	Syntax:
	fun <T> T.takeIf(predicate: (T) -> Boolean): T?
	Example:
	val userName = "JohnDoe"

	val validUserName = userName.takeIf { it.length > 5 }
	validUserName?.let {
		println("Username is valid: $it")
	} ?: println("Invalid username")


-->	takeUnless
	The takeUnless function is the inverse of takeIf. It returns the object if the predicate evaluates to false.
	If the predicate is true, it returns null.
	Syntax:
	fun <T> T.takeUnless(predicate: (T) -> Boolean): T?
	Example:
	val networkErrorCode = 404
	val isErrorCritical = networkErrorCode.takeUnless { it == 404 }
	isErrorCritical?.let {
		println("Critical error code: $it")
	} ?: println("Not a critical error")
