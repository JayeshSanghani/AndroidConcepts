https://www.kodeco.com/18409174-common-design-patterns-and-app-architectures-for-android
https://refactoring.guru/design-patterns
https://sourcemaking.com/design_patterns/behavioral_patterns

-->Design Patterns
    -Design patterns usually deal with objects.
    -A Design Pattern is a general, reusable solution to a commonly occurring problem within a given context.
    -Design patterns are like "tools in a toolbox" for building better apps faster, with fewer mistakes.
1.Creational patterns: How you create objects.
    Builder
    Dependency Injection
    Singleton
    Factory
2.Structural patterns: How you compose objects.
    Adapter
    Facade
    Decorator
    Composite
3.Behavioral patterns: How you coordinate object interactions.
    Command
    Observer
    Strategy
    State

------------------------------------------------------------------------------------------------------------------------
1.Creational patterns: How you create objects.
1.1 Builder
    Definition:
    -By using Builder pattern you construct complex objects step by step.
    -The pattern allows you to produce different types and representations of an object using the same construction code.
    Example: Default component
        AlertDialog.Builder(this)
          .setTitle("Sandwich Dialog")
          .setMessage("Please use the spicy mustard.")
          .setNegativeButton("No thanks") { dialogInterface, i ->
            // "No thanks" action
          }
          .setPositiveButton("OK") { dialogInterface, i ->
            // "OK" action
          }
          .show()
    Pros:
    -You can construct objects step-by-step, defer construction steps or run steps recursively.
    -You can reuse the same construction code when building various representations of products.
    -Single Responsibility Principle. You can isolate complex construction code from the business logic of the product.
    Cons:
    -The overall complexity of the code increases since the pattern requires creating multiple new classes.

1.2 Dependency Injection
    Definition:
    -A design pattern where an object receives its dependencies from an external source.
    -Dependency injection is technic where by one object supplies the dependency's of another object.
    Example:
    @HiltViewModel
    class MyViewModel @Inject constructor(private val repository: MyRepository) : ViewModel() {
        // ViewModel logic
    }
Pros:
-Loose Coupling: Classes are not tightly bound to their dependencies.
-Easier Testing: Dependencies can easily be mocked or replaced.
-Improved Code Reusability: Same classes can be reused with different dependencies.
-Centralized Configuration: Manage dependencies at a single place (e.g., in Hilt Modules).
-Follows SOLID Principles: Especially the Dependency Inversion Principle.
-Lifecycle Awareness: DI frameworks integrate with Activity/Fragment lifecycles (Hilt manages scopes like @ActivityScoped, @ViewModelScoped).
Cons:
-Boilerplate Code: Some DI frameworks (like Dagger) require a lot of setup (Modules, Components).
-Performance Overhead: Reflection-based DI (like Hilt's under-the-hood use of Dagger) can slightly affect app startup time if not optimized.
-Steeper Learning Curve: Beginners may find DI concepts and frameworks (like Dagger or Hilt) complex initially.


1.3 Singleton
-Definition: Singleton is a creational design pattern that lets you ensure that a class has only one instance,
while providing a global access point to this instance.
Example:
    object RetrofitClient {
        val instance: Retrofit by lazy {
            Retrofit.Builder()
                .baseUrl("https://api.example.com/")
                .build()
        }
    }

Pros:
-You can be sure that a class has only a single instance.
-You gain a global access point to that instance.
-The singleton object is initialized only when it’s requested for the first time.
Cons:
-Violates the Single Responsibility Principle. The pattern solves two problems at the time.
-The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other.
-The pattern requires special treatment in a multithreaded environment so that multiple
threads won’t create a singleton object several times.
-It may be difficult to unit test the client code of the Singleton because many test frameworks rely
on inheritance when producing mock objects. Since the constructor of the singleton class is private and
overriding static methods is impossible in most languages, you will need to think of a creative way to
mock the singleton. Or just don’t write the tests. Or don’t use the Singleton pattern.


1.4 Factory
Definition:
-Factory Method is a creational design pattern that provides an interface for creating objects in a superclass,
but allows subclasses to alter the type of objects that will be created.
-Factory pattern used when Creating objects without specifying the exact class.
    Example: Suppose you have multiple Fragment types in your app and want to create them based on user input.
    // Factory class
    public class FragmentFactory {
        public static Fragment createFragment(String type) {
            switch (type) {
                case "Home":
                    return new HomeFragment();
                case "Profile":
                    return new ProfileFragment();
                case "Settings":
                    return new SettingsFragment();
                default:
                    throw new IllegalArgumentException("Unknown Fragment type: " + type);
            }
        }
    }
    Usage
    Fragment fragment = FragmentFactory.createFragment("Home");
    getSupportFragmentManager().beginTransaction()
            .replace(R.id.container, fragment)
            .commit();
Pros:
-You avoid tight coupling between the creator and the concrete products.
-Single Responsibility Principle. You can move the product creation code into one place in the program, making the code easier to support.
-Open/Closed Principle. You can introduce new types of products into the program without breaking existing client code.
Cons:
-The code may become more complicated since you need to introduce a lot of new subclasses to implement the pattern.
The best case scenario is when you’re introducing the pattern into an existing hierarchy of creator classes.

------------------------------------------------------------------------------------------------------------------------
2.Structural patterns: How you compose objects.
2.1 Adapter
Definition: Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
Example:
    public class MyAdapter extends RecyclerView.Adapter<MyAdapter.ViewHolder> {
        private List<String> data;

        public MyAdapter(List<String> data) {
            this.data = data;
        }

        @Override
        public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
            holder.textView.setText(data.get(position));
        }

        // Other RecyclerView.Adapter methods
    }
Pros:
-Single Responsibility Principle. You can separate the interface or data conversion code from the
primary business logic of the program.
-Open/Closed Principle. You can introduce new types of adapters into the program without breaking the existing client code,
as long as they work with the adapters through the client interface.
Cons:
-The overall complexity of the code increases because you need to introduce a set of new interfaces and classes.
Sometimes it’s simpler just to change the service class so that it matches the rest of your code.


2.2 Facade
Definition: Facade is a structural design pattern that provides a simplified interface to a library,
a framework, or any other complex set of classes.
Example: Square’s Retrofit is an open-source Android library that helps you implement the Facade pattern. You create an interface
    to provide API data to client classes like so:
    interface BooksApi {
      @GET("books")
      fun listBooks(): Call<List<Book>>
    }

    Using MediaPlayer as a facade for audio playback.Internally, MediaPlayer handles decoding, buffering, and playback.
    MediaPlayer mediaPlayer = MediaPlayer.create(context, R.raw.audio_file);
    mediaPlayer.start();
Pros:
-You can isolate your code from the complexity of a subsystem.
Cons:
-A facade can become a god object coupled to all classes of an app.

2.3 Decorator
Definition: Adds responsibilities to an object dynamically without modifying its structure.
Example: Decorating a TextView with SpannableString.
    SpannableString spannable = new SpannableString("Bold and Italic Text");
    spannable.setSpan(new StyleSpan(Typeface.BOLD), 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    spannable.setSpan(new StyleSpan(Typeface.ITALIC), 9, 15, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    textView.setText(spannable);
Pros:
- You can extend an object’s behavior without making a new subclass.
-You can add or remove responsibilities from an object at runtime.
-You can combine several behaviors by wrapping an object into multiple decorators.
-Single Responsibility Principle. You can divide a monolithic class that implements many possible variants of behavior
into several smaller classes.
Cons:
-It’s hard to remove a specific wrapper from the wrappers stack.
-It’s hard to implement a decorator in such a way that its behavior doesn’t depend on the order in the decorators stack.
-The initial configuration code of layers might look pretty ugly.


2.4 Composite
Definition: Composite is a structural design pattern that lets you compose objects into tree structures and
then work with these structures as if they were individual objects.
Example: Android’s View hierarchy.
    val linearLayout = LinearLayout(context).apply {
        orientation = LinearLayout.VERTICAL
        addView(Button(context))
        addView(TextView(context))
    }
Pros:
-You can work with complex tree structures more conveniently: use polymorphism and recursion to your advantage.
-Open/Closed Principle. You can introduce new element types into the app without breaking the existing code,
which now works with the object tree.
Cons:
-It might be difficult to provide a common interface for classes whose functionality differs too much.
In certain scenarios, you’d need to overgeneralize the component interface, making it harder to comprehend.


3.Behavioral patterns: How you coordinate object interactions.
3.1 Command
Definition: Encapsulates a request as an object, allowing parameterization of clients with different requests.
Example: Using OnClickListener to handle button clicks.
    button.setOnClickListener(v -> {
        // Command logic
        Toast.makeText(context, "Button clicked!", Toast.LENGTH_SHORT).show();
    });
Pros:
-Single Responsibility Principle. You can decouple classes that invoke operations from classes that perform these operations.
-Open/Closed Principle. You can introduce new commands into the app without breaking existing client code.
-You can implement undo/redo.
-You can implement deferred execution of operations.
-You can assemble a set of simple commands into a complex one.
Cons:
-The code may become more complicated since you’re introducing a whole new layer between senders and receivers.

3.2 Observer
Definition: Observer is a behavioral design pattern that lets you defines a dependency between objects
so that when one changes state, all dependents are notified.
Android Example: Using LiveData to observe data changes in ViewModel.
    viewModel.getData().observe(this, data -> {
        textView.setText(data);
    });
    Here, LiveData notifies the observer (Activity/Fragment) when the data changes.
Pros:
-Open/Closed Principle. You can introduce new subscriber classes without having to change the publisher’s code
(and vice versa if there’s a publisher interface).
-You can establish relations between objects at runtime.
Cons:
-Subscribers are notified in random order.

3.3 Strategy:
Strategy is a behavioral design pattern that lets you defines a family of algorithms and makes them interchangeable.
Example: Implementing a Layout strategy for data in a list.
    interface LayoutStrategy {
        fun apply(recyclerView: RecyclerView)
    }

    class GridLayoutStrategy : LayoutStrategy {
        override fun apply(recyclerView: RecyclerView) {
            recyclerView.layoutManager = GridLayoutManager(recyclerView.context, 2)
        }
    }

    class LinearLayoutStrategy : LayoutStrategy {
        override fun apply(recyclerView: RecyclerView) {
            recyclerView.layoutManager = LinearLayoutManager(recyclerView.context)
        }
    }

    Usage
    val strategy: LayoutStrategy = GridLayoutStrategy()
    strategy.apply(recyclerView)

Pros:
-You can swap algorithms used inside an object at runtime.
-You can isolate the implementation details of an algorithm from the code that uses it.
-You can replace inheritance with composition.
-Open/Closed Principle. You can introduce new strategies without having to change the context
Cons:
- If you only have a couple of algorithms and they rarely change, there’s no real reason to overcomplicate
the program with new classes and interfaces that come along with the pattern.
-Clients must be aware of the differences between strategies to be able to select a proper one.

3.4 State
Definition: Allows an object to alter its behavior when its internal state changes.
Example: MediaPlayer state transitions (Prepared, Playing, Paused)
    val mediaPlayer = MediaPlayer.create(context, R.raw.audio_file)
    if (!mediaPlayer.isPlaying) {
        mediaPlayer.start()  // Changes to "Playing" state
    } else {
        mediaPlayer.pause()  // Changes to "Paused" state
    }

Pros:
-Single Responsibility Principle. Organize the code related to particular states into separate classes.
-Open/Closed Principle. Introduce new states without changing existing state classes or the context.
-Simplify the code of the context by eliminating bulky state machine conditionals.
Cons:
-Applying the pattern can be overkill if a state machine has only a few states or rarely changes.

------------------------------------------------------------------------------------------------------------------------
🔥 Mastering Android Design Patterns: A Must for Every Developer
In today's fast-paced app development world, writing just working code isn't enough. We must write scalable, maintainable, and robust code — and that's exactly where Design Patterns shine! 🌟

Today, let's dive into how we use Design Patterns in Android Development with real examples. 🚀
📦 1.Creational patterns: How you create objects.
    Builder
    Dependency Injection
    Singleton
    Factory
🏗️ 2.Structural patterns: How you compose objects.
    Adapter
    Facade
    Decorator
    Composite
🔄 3.Behavioral patterns: How you coordinate object interactions.
    Command
    Observer
    Strategy
    State

Which design pattern do you use most in your Android apps?
Comment below! 👇

https://shorturl.at/rYEch

#AndroidDevelopment #MobileDevelopment #DesignPatterns #AndroidJetpack #CleanCode #SoftwareArchitecture


Hey     ! Hope you're doing well.
Just wanted to share a new article I published on Medium — thought it might be useful.