Android Layers
Android App lifecycle
OOP concepts
clean architecture
Design patterns(MVC, MVP, MVVM, MVI, Factory,
Singleton, Repository, Adapter, Observables)
Solid principle
CI/CD configuration(github actions)
Threading concepts for android
Garbage collection
Coroutine
Work manager
Job schedulers
Leck Cannery
Profiler
Lifecycle states and management
Navigation
Kotlin all basic
	Mutable/Immutable
	Scope functions
	Scheled class
	inline, no inline and cross line fun
	Higher order fun
	All types of null safety
	Live data
	Flow
	Coroutine channel
	Lambda fun
	Infix function
	Suspend function and how its work
Github commands and utilization
DI (Dagger2 and Helt) annotations
Image cashing mechanisms in android
Retrofit, Volley
Rest api and graphql diff
Http logging
Security api call
Api cashing
Agail and water flow methodology


What is Concurrency in coroutine.
What is Scopes in coroutine an how to switch context.
How we handle asynchronous parallel calls and give me case scenario.
What are coroutine builders and explain about its use case.

//ViewModel
What is viewmodel and explain how it work and handle configuration change.
If we have to make two api call and one for token and another for getting User detail what could the best way and where should we store data of token.
Setup all the required dependency for Unit test and DI (Dagger2) for test class.
ViewModel and android viewmodel difference and ways to initialize viewmodel .


// DI(Hilt)
Annotation, Definition, Injection, EntryPoints
------------------------------------------------------------

->How the livedata is lifecycle aware.













---------------
https://www.kodeco.com/18409174-common-design-patterns-and-app-architectures-for-android
Design Patterns
A Design Pattern is a general, reusable solution to a commonly occurring problem within a given context.

1.Creational patterns: How you create objects.
->Builder
In a builder pattern, you are only concerned about what you need from a class and not everything that a class has.
AlertDialog.Builder(this)
  .setTitle("Sandwich Dialog")
  .setMessage("Please use the spicy mustard.")
  .setNegativeButton("No thanks") { dialogInterface, i ->
    // "No thanks" action
  }
  .setPositiveButton("OK") { dialogInterface, i ->
    // "OK" action
  }
  .show()


->Dependency Injection


->Singleton


->Factory

2.Structural patterns: How you compose objects.
->Adapter


->Facade


->Decorator


->Composite

3.Behavioral patterns: How you coordinate object interactions.
->Command


->Observer


->Strategy


->State

------------------------------------------------------------------------------------------
General Questions about Architectural Patterns
What are architectural patterns, and why are they important in software development?
What are the main differences between MVVM, MVI, and MVP?
What factors should you consider when choosing an architectural pattern for a project?

MVVM (Model-View-ViewModel) Questions
What are the key components of the MVVM pattern?
How does data binding work in MVVM?
What is the role of the ViewModel in MVVM?
How does MVVM improve testability?
What are the advantages of using MVVM over MVC or MVP?
Can you explain how lifecycle management works in MVVM, especially in Android?
What tools or libraries can you use to implement MVVM in an Android application?
How does MVVM handle user input and state management?
What challenges have you faced when implementing MVVM, and how did you overcome them?
Can you give an example of how you would implement a feature using MVVM?

MVI (Model-View-Intent) Questions
What is the MVI pattern, and how does it differ from MVVM and MVP?
What are the components of the MVI architecture?
How does MVI handle state management?
What is the role of Intents in MVI?
How do you manage side effects in MVI?
Can you explain how data flows in an MVI application?
What are the advantages and disadvantages of using MVI?
How does MVI improve unidirectional data flow in applications?
What tools or libraries can you use for implementing MVI in Android applications?
Can you provide a code example that demonstrates MVI?

MVP (Model-View-Presenter) Questions
What are the main components of the MVP pattern?
How does the Presenter communicate with the Model and View in MVP?
What is the primary responsibility of the Presenter in MVP?
How does MVP facilitate testability?
What are the strengths and weaknesses of using MVP?
Can you explain how MVP handles user interactions?
What are common use cases for implementing MVP?
How does MVP manage state and lifecycle events?
Can you provide an example of a project where you implemented MVP?
What challenges have you encountered when working with MVP?

Comparison Questions
How do MVVM, MVI, and MVP differ in terms of state management?
Which architectural pattern would you choose for a particular use case, and why?
How does data binding in MVVM compare to the communication mechanisms in MVP and MVI?
In which scenarios would you prefer MVI over MVVM or MVP?
What are some real-world examples of applications that use MVVM, MVI, and MVP?

Scenario-Based Questions
Given a scenario where an application requires frequent UI updates based on user input, which architectural pattern would you choose? Justify your answer.
How would you implement error handling in an MVVM application?
Describe how you would migrate an existing MVP application to MVVM or MVI.
If you had to add new features to an existing application, how would the choice of architectural pattern affect your approach?
How would you handle API responses in an MVI architecture?

Practical Questions
Can you walk us through a code example implementing MVVM, MVI, and MVP?
How would you test an MVP Presenter? What tools would you use?
Show us how you would implement a feature using MVI with state management.
How do you ensure performance when using data binding in MVVM?
What strategies would you use to manage complex UIs in MVI?
-----------------------------------------------------------------------------
Designation	                Organization	                    Location	Duration	Start date	End date
Android Developer	        Vaidya Realities	                Rajkot	    18	        01/04/2014	30/10/2015
Android Developer	        Samartha Solutions	                Ahmedabad	5	        01/12/2015	31/05/2016
Android Developer	        Dubond Infotech Services LLP	    Ahmedabad	41	        09/06/2016	22/11/2019
Senior Software Engineer	Pay Ok Fintech Ecosystem Pvt Ltd	Ahmedabad	22	        25/11/2019	07/09/2021
Senior Android Developer	Omni ISM	                        Ahmedabad	27	        09/09/2021	31/12/2023

--------------------------------------------------------------------------------------
 I request a relocation to another project within the company. As you are aware, my last working day is October 30, 2024
 just get call from my parent company.

I have not received any communication regarding potential project changes, and I am concerned about the short turnaround
time to secure a new position outside the company.
Given the circumstances, I kindly request your assistance in finding a suitable project within the organization where
I can continue to contribute my skills and expertise.
I am open to exploring new opportunities and am confident in my ability to adapt to different project requirements.
Thank you for your understanding and consideration of my request.

--------------------------------------------------------------------------------------