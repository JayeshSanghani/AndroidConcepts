Jetpack Compose Interview Questions:
-> LaunchedEffect
-> State hosting
-> Compose navigation
-> Jetpack Compose vs Android View System.
-> Explain the concept of declarative UI in Jetpack Compose.
-> Declarative UI vs Imperative UI.
-> What are Composable functions?
-> What is Recomposition?
-> What is State in Compose?
-> How does state management work in Jetpack Compose?
-> Stateful composable vs Stateless composable.
-> What are the side effects?
-> Difference between LaunchedEffect and DisposableEffect.
-> What is rememberCoroutineScope and its use cases?
-> How to observe Flows, and LiveData states in Compose UI?
-> How can we handle asynchronous operations in Jetpack Compose?
-> How can we convert a non-compose state into a Compose state?
-> Explain derivedStateOf.
-> Explain rememberUpdatedState.
-> Difference between remember and rememberSaveable.
-> Explain the Lifecycle of a Composable in Jetpack Compose.
-> How do you handle lifecycle events in Compose functions?
-> What are the best practices for performance optimization in Jetpack Compose?
-> Can we use both Jetpack Compose and Android View in a Single App?
-> What is State Hoisting?
-> Explain CompositionLocal.
-> Explain Jetpack Compose Phases.
-> What is the role of the Modifier in Jetpack Compose?
-> What are Semantics?
-> How can you handle user input and events in Jetpack Compose?
-> How do you handle navigation in Jetpack Compose?
-> How do you handle orientation changes in Jetpack Compose?
-> Explain the concept of unidirectional data flow in Jetpack Compose.
-> How to create Custom Layouts in Compose?



-> What are Dispatchers and Name all of them
-> On which thread Dispatchers .Default execute the task or use which thread?
-> Dispatchers .Default vs Dispatcher .IO
-> What is SupervisorScope?
-> Exception Handling in Coroutine
-> What is ViewModelScope and How does it work internally?
-> What is Clean Architecture in MVVM
-> What are Provides and Binds in your Dagger library
-> Map vs FlatMap in kotlin
-> Singleton Pattern in Kotlin with object keyword
-> Collections API in Kotlin
-> MVVM vs MVI
-> What is Unidirectional Flow
-> StateFlow vs SharedFlow
-> Builder Pattern in Kotlin
-> Higher Order Functions in Kotlin
-> Covariance in Kotlin
-> When does ViewModel not survive
-> What is process death?
-> What does the Signed APK mean?
-> What is Deep and Shallow Copy?
-> What is Intent Service?
-> What is R8?
-> What is Frozen Frame?
-> What are App Bundles?
-> What is Obfuscation?
-> How to store local Secret Keys?
-> What is a secret .properties file?
-> What is Single Sign-Off?
-> How can you create or use an Android Device ID?
-> How do you figure out the User using the different Devices?
-> What is Product Flavor?
-> What is Build Flavor?
-> What is Protobuf?
-> What is SSL Pinning?
-> What is Heap and Stack Memory?
-> Destructuring declaration


Android Layers
Android App lifecycle
OOP concepts
clean architecture
Design patterns(MVC, MVP, MVVM, MVI, Factory,
Singleton, Repository, Adapter, Observables)
Solid principle
CI/CD configuration(github actions)
Threading concepts for android
Garbage collection
Coroutine
Work manager
Job schedulers
Leck Cannery
Profiler
Lifecycle states and management
Navigation
Kotlin all basic
	Mutable/Immutable
	Scope functions
	Scheled class
	inline, no inline and cross line fun
	Higher order fun
	All types of null safety
	Live data
	Flow
	Coroutine channel
	Lambda fun
	Infix function
	Suspend function and how its work
Github commands and utilization
DI (Dagger2 and Helt) annotations
Image cashing mechanisms in android
Retrofit, Volley
Rest api and graphql diff
Http logging
Security api call
Api cashing
Agail and water flow methodology


What is Concurrency in coroutine.
What is Scopes in coroutine an how to switch context.
How we handle asynchronous parallel calls and give me case scenario.
What are coroutine builders and explain about its use case.

//ViewModel
What is viewmodel and explain how it work and handle configuration change.
If we have to make two api call and one for token and another for getting User detail what could the best way and where should we store data of token.
Setup all the required dependency for Unit test and DI (Dagger2) for test class.
ViewModel and android viewmodel difference and ways to initialize viewmodel .


// DI(Hilt)
Annotation, Definition, Injection, EntryPoints
------------------------------------------------------------

->How the livedata is lifecycle aware.


-----------------------------------------------------------------------------
Designation	                Organization	                    Location	Duration	Start date	End date
Android Developer	        Vaidya Realities	                Rajkot	    18	        01/04/2014	30/10/2015
Android Developer	        Samartha Solutions	                Ahmedabad	5	        01/12/2015	31/05/2016
Android Developer	        Dubond Infotech Services LLP	    Ahmedabad	41	        09/06/2016	22/11/2019
Senior Software Engineer	Pay Ok Fintech Ecosystem Pvt Ltd	Ahmedabad	22	        25/11/2019	07/09/2021
Senior Android Developer	Omni ISM	                        Ahmedabad	27	        09/09/2021	31/12/2023

--------------------------------------------------------------------------------------
 I request a relocation to another project within the company. As you are aware, my last working day is October 30, 2024
 just get call from my parent company.

I have not received any communication regarding potential project changes, and I am concerned about the short turnaround
time to secure a new position outside the company.
Given the circumstances, I kindly request your assistance in finding a suitable project within the organization where
I can continue to contribute my skills and expertise.
I am open to exploring new opportunities and am confident in my ability to adapt to different project requirements.
Thank you for your understanding and consideration of my request.

--------------------------------------------------------------------------------------
