->MVVM (Model-View-ViewModel) is a software architectural pattern commonly used in Android development.
It separates the application into three main components:

1)Model: Represents the data and business logic. It manages the data, fetching it from databases or APIs.
2)View: Displays the data and receives user input, but does not contain logic.
3)ViewModel: Acts as a mediator between the View and Model. It holds the logic, processes the data,
and exposes it in a format that the View can display.


->Why is MVVM Used?
1)Lifecycle Awareness: In Android, the ViewModel is lifecycle-aware, reducing memory leaks and ensuring efficient handling of UI-related data.
2)Separation of Concerns: By decoupling the UI from the business logic, MVVM makes the code cleaner and easier to maintain.
3)Scalability: MVVM makes it simpler to scale applications by maintaining a clear distinction between layers.
4)Testability: Business logic is moved to the ViewModel, making it easier to write unit tests.


->When to Use MVVM:
When managing complex UIs with a lot of user interactions, dynamic data, and configuration changes.
When data persistence across configuration changes is important.
When building scalable, testable, and maintainable applications, where you need clean separations of
UI and data-handling logic.


->Key Concepts in Android MVVM:
1)Data Binding: Androidâ€™s Data Binding Library can be used to bind the ViewModel data directly to UI components in XML.
This reduces the amount of boilerplate code for updating the UI when the data changes.
2)LiveData: LiveData is a lifecycle-aware observable data holder used in the ViewModel. It allows the View to observe
changes in the data and update the UI automatically when the data is updated.
3)Repository Pattern: Often, the Model layer uses a Repository to abstract data access. A repository handles fetching
data from multiple sources like a remote API or a local database.


->How MVVM Works
1)ViewModel Fetches Data: The ViewModel interacts with the Repository (part of the Model) to fetch data.
2)LiveData Updates View: The ViewModel exposes data as LiveData, which the View observes. When data changes, the UI updates automatically.
3)User Interaction: User actions are passed from the View to the ViewModel, which handles the logic.


->Advantages of MVVM
Reduced Code in Activity/Fragment: All business logic is in the ViewModel, keeping the View lightweight.
Reactive Updates: Changes in the Model automatically reflect in the UI.
Lifecycle Awareness: Android's ViewModel survives configuration changes like screen rotations.

->Disadvantages of MVVM
Steeper Learning Curve: For developers new to architectural patterns.
Boilerplate Code: Can result in additional code for simple applications.


1)Presentation Layer
Purpose:
	Contains UI logic (Activity/Fragment) and observes changes from ViewModel.
Classes:
 	->XML Layout (activity_login.xml)
		The XML layout uses two-way data binding (@={}) to directly bind the EditText values to the ViewModel and triggers the login logic on button click.
	<layout xmlns:android="http://schemas.android.com/apk/res/android"
	    xmlns:app="http://schemas.android.com/apk/res-auto"
	    xmlns:tools="http://schemas.android.com/tools">
		
	    <data>
	        <variable
	            name="viewModel"
	            type="com.example.app.LoginViewModel" />
	    </data>

	    <LinearLayout
	        android:layout_width="match_parent"
	        android:layout_height="match_parent"
	        android:orientation="vertical"
	        android:padding="16dp">

	        <EditText
	            android:id="@+id/editTextUsername"
	            android:layout_width="match_parent"
	            android:layout_height="wrap_content"
	            android:hint="Username"
	            android:text="@={viewModel.username}" />

	        <EditText
	            android:id="@+id/editTextPassword"
	            android:layout_width="match_parent"
	            android:layout_height="wrap_content"
	            android:hint="Password"
	            android:inputType="textPassword"
	            android:text="@={viewModel.password}" />

	        <Button
	            android:id="@+id/buttonLogin"
	            android:layout_width="match_parent"
	            android:layout_height="wrap_content"
	            android:text="Login"
	            android:onClick="@{() -> viewModel.login()}" />

	        <ProgressBar
	            android:id="@+id/progressBar"
	            android:layout_width="wrap_content"
	            android:layout_height="wrap_content"
	            android:visibility="@{viewModel.isLoading ? View.VISIBLE : View.GONE}" />
	    </LinearLayout>
	</layout>
	
	->LoginActivity (or LoginFragment):
		Using Data Binding, the XML layout binds directly to the LoginViewModel. This removes the need to manually find views or set up listeners in the Activity.
	class LoginActivity : AppCompatActivity() {
	    private lateinit var binding: ActivityLoginBinding
	    private val viewModel: LoginViewModel by viewModels {
	        LoginViewModelFactory(LoginUseCase(LoginRepository()))
	    }

	    override fun onCreate(savedInstanceState: Bundle?) {
	        super.onCreate(savedInstanceState)
	        binding = DataBindingUtil.setContentView(this, R.layout.activity_login)

	        // Bind ViewModel to the layout
	        binding.viewModel = viewModel
	        binding.lifecycleOwner = this

	        // Observe login result
	        viewModel.loginResult.observe(this) { result ->
	            if (result.isSuccessful) {
	                Toast.makeText(this, "Login Successful!", Toast.LENGTH_SHORT).show()
	                // Navigate to the next screen
	            } else {
	                Toast.makeText(this, "Login Failed: ${result.errorMessage}", Toast.LENGTH_SHORT).show()
	            }
	        }
	    }
	}

	->LoginViewModel:
		The ViewModel exposes observable fields (e.g., MutableLiveData) for the UI to bind directly to.
	class LoginViewModel(private val loginUseCase: LoginUseCase) : ViewModel() {
	    private val _loginResult = MutableLiveData<LoginResult>()
	    val loginResult: LiveData<LoginResult> = _loginResult

	    fun login(username: String, password: String) {
	        viewModelScope.launch {
	            val result = loginUseCase.execute(username, password)
	            _loginResult.value = result
	        }
	    }
	}

2)Domain Layer
Purpose:
	Contains business logic and use cases.
	Decoupled from the data source.
Classes:
	->LoginUseCase:
		Executes the login operation by calling the LoginRepository.
		class LoginUseCase(private val loginRepository: LoginRepository) {
		    suspend fun execute(username: String, password: String): LoginResult {
		        return loginRepository.login(username, password)
		    }
		}

	->LoginResult:
		Represents the outcome of the login operation..

	data class LoginResult(val isSuccessful: Boolean, val errorMessage: String? = null)

3)Data Layer
Purpose:
	Manages data sources (local or remote) and handles fetching/saving data.
Classes:
	->LoginRepository:
		Acts as the entry point to data operations.
		Fetches data from remote (e.g., server via API) or local (e.g., Room).
		class LoginRepository {
		    private val remoteDataSource = RemoteDataSource()
		    private val localDataSource = LocalDataSource()

		    suspend fun login(username: String, password: String): LoginResult {
		        // Example logic: Try remote login, fall back to local cache
		        val remoteResult = remoteDataSource.login(username, password)
		        return if (remoteResult.isSuccessful) {
		            localDataSource.saveUserData(username, password) // Cache data locally
		            remoteResult
		        } else {
		            remoteResult
		        }
		    }
		}


	->RemoteDataSource:
		Handles API requests (e.g., Retrofit).
		class RemoteDataSource {
		    suspend fun login(username: String, password: String): LoginResult {
		        // Simulate API call
		        return if (username == "test" && password == "password") {
		            LoginResult(true)
		        } else {
		            LoginResult(false, "Invalid credentials")
		        }
		    }
		}

	->LocalDataSource:
		Handles local database operations (e.g., Room).
		class LocalDataSource {
		    fun saveUserData(username: String, password: String) {
		        // Save to Room or SharedPreferences
		    }
		}


->How Data Flows in the Architecture
	User Action:
		The user enters credentials in the LoginActivity and clicks the login button.
	ViewModel Logic:
		LoginActivity calls LoginViewModel.login(), which triggers the LoginUseCase.
	Domain Logic:
		The LoginUseCase interacts with the LoginRepository.
	Data Layer:
		The LoginRepository fetches the data from RemoteDataSource (API) or LocalDataSource (cache).
	Result to UI:
		The LoginResult flows back to the ViewModel, which updates the LiveData. 
		The Activity observes this and updates the UI.


