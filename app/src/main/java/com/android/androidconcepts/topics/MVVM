
->MVVM (Model-View-ViewModel) is a software architectural pattern commonly used in Android development.
It separates the application into three main components:

Model: Represents the data and business logic. It manages the data, fetching it from databases or APIs.
View: Displays the data and receives user input, but does not contain logic.
ViewModel: Acts as a mediator between the View and Model. It holds the logic, processes the data,
and exposes it in a format that the View can display.


->MVVM Workflow in Android
The View observes data from the ViewModel (using LiveData or other observable components).
The ViewModel requests data from the Model (such as a repository that interacts with an API or a database).
The Model provides the data to the ViewModel, which then updates the View.
User actions in the View (like button clicks) are sent to the ViewModel, which updates the Model
or triggers actions like API calls.

->Advantages of MVVM:
-Separation of Concerns:
MVVM enforces a clear separation between the UI logic (View), data logic (Model), and the communication between them
(ViewModel).
-Lifecycle Awareness:
The ViewModel is lifecycle-aware and survives configuration changes like screen rotations, meaning you don’t need
to reload data unnecessarily.
-Testability:
The ViewModel contains no reference to the View, making it easy to unit test in isolation.
-Maintainability:
Since the responsibilities are well-separated, it is easier to maintain and modify individual components
(e.g., updating the UI won’t affect the data logic in the ViewModel).
-Cleaner Code:
By handling business logic in the ViewModel and data logic in the Model, the code in the Activity or Fragment
becomes cleaner and easier to manage.

->Disadvantages of MVVM:
-Steeper Learning Curve: It can be complex for beginners to understand and implement the correct separation of
concerns, especially with LiveData, DataBinding, and ViewModels working together.
-Overhead for Small Projects: In very simple applications, MVVM can feel like over-engineering since the structure
adds some complexity compared to simpler patterns like MVP.

->When to Use MVVM:
When managing complex UIs with a lot of user interactions, dynamic data, and configuration changes.
When data persistence across configuration changes is important.
When building scalable, testable, and maintainable applications, where you need clean separations of
UI and data-handling logic.

->Key Concepts in Android MVVM:
Data Binding: Android’s Data Binding Library can be used to bind the ViewModel data directly to UI components in XML.
This reduces the amount of boilerplate code for updating the UI when the data changes.

LiveData: LiveData is a lifecycle-aware observable data holder used in the ViewModel. It allows the View to observe
changes in the data and update the UI automatically when the data is updated.

Repository Pattern: Often, the Model layer uses a Repository to abstract data access. A repository handles fetching
data from multiple sources like a remote API or a local database.